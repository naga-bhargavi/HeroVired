import java.util.*;

public class Solution {

    public static boolean canWin(int leap, int[] game) {
        // Return true if you can win the game; otherwise, return false.
        int n = game.length;
    Queue<Integer> q = new LinkedList<>();
    boolean[] vt = new boolean[n];
    q.add(0);
    vt[0] = true;
    while (!q.isEmpty()) {
      int present = q.poll();
    
      if (present == n - 1 || present + leap >= n) {
        return true;
      }
      if (present - 1 >= 0 && game[present - 1] == 0 && !vt[present - 1])
       {
        q.add(present - 1);
        vt[present - 1] = true;
      }
      if (present + 1 < n && game[present + 1] == 0 && !vt[present + 1])
       {
        q.add(present + 1);
        vt[present + 1] = true;
      }
        if (present + leap < n && game[present + leap] == 0 && !vt[present + leap])
        {
        q.add(present + leap);
        vt[present + leap] = true;
      }
    }
    return false;
    }

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        int q = scan.nextInt();
        while (q-- > 0) {
            int n = scan.nextInt();
            int leap = scan.nextInt();
            
            int[] game = new int[n];
            for (int i = 0; i < n; i++) {
                game[i] = scan.nextInt();
            }

            System.out.println( (canWin(leap, game)) ? "YES" : "NO" );
        }
        scan.close();
    }
}